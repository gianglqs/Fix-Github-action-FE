name: Deploy QA Hyster-yale-frontend

on:
   pull_request:
   push:
      branches:
         - main

jobs:
   deploy:
      runs-on: [deploy-QA-host]
      if: github.event_name == 'pull_request' && github.event.pull_request.merged == true || github.event_name == 'push'

      steps:
         - name: Cancel previous pipeline
           uses: styfle/cancel-workflow-action@0.12.0
           with:
              access_token: ${{ secrets.GHCR_TOKEN }}
              all_but_latest: true

         - name: set env
           shell: bash
           run: |
              CONFIG_FILE='/opt/hysteryale/config/docker_container.conf'

              fe_release_tag=$(sed -n 's/^fe_release_tag=//p' "$CONFIG_FILE")
               echo "LAST_SUCCESS_RELEASE_TAG=$fe_release_tag" >> "$GITHUB_ENV"

              fe_image_id=$(sed -n 's/^fe_image_id=//p' "$CONFIG_FILE")
              echo "LAST_SUCCESS_IMAGE_NAME=$fe_image_id" >> "$GITHUB_ENV"

              fe_container_name=$(sed -n 's/^fe_container_name=//p' "$CONFIG_FILE")
              echo "LAST_SUCCESS_CONTAINER_NAME=$fe_container_name" >> "$GITHUB_ENV"

              echo "TIMEZONE_HY=$(cat /etc/timezone)" >> $GITHUB_ENV
              echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
              echo 'WORK_DIR=/opt/hysteryale/hyster-yale-frontend' >> $GITHUB_ENV

              echo "NEW_CONTAINER_NAME=hysteryale-fe_${{ github.event.pull_request.number }}" >> $GITHUB_ENV
              echo "NEW_RELEASE_TAG=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
              echo "NEW_IMAGE_NAME=ghcr.io/phoenix-software-development/hyster-yale-frontend:latest" >> $GITHUB_ENV

         - name: Checkout code to get file compose.yml
           shell: bash
           run: |
              cd $WORK_DIR
              git pull origin main

         - name: build image
           shell: bash
           run: |
              cd $WORK_DIR

              /usr/bin/yarn install
              docker build -t $NEW_IMAGE_NAME --build-arg IMAGE_TAG=qa-deploy-${{ github.sha }} --build-arg RELEASE_TAG=${{ github.event.pull_request.number }} -f docker/Dockerfile .

         - name: Stop old container is running
           shell: bash
           run: |
              cd $WORK_DIR/docker
              IMAGE_NAME=$LAST_SUCCESS_IMAGE_NAME CONTAINER_NAME=$LAST_SUCCESS_CONTAINER_NAME docker compose stop

         - name: Run new Image
           shell: bash
           run: |
              cd $WORK_DIR/docker
              IMAGE_NAME=$NEW_IMAGE_NAME CONTAINER_NAME=$NEW_CONTAINER_NAME docker compose up -d

         - name: Check successfully
           shell: bash
           run: |
              sleep 30

              if [[ $(netstat -tuln | grep 3005) == "" ]]
              then
                echo 'Build Failure'
                docker logs $NEW_CONTAINER_NAME

                cd $WORK_DIR/docker
                echo 'Down docker compose failure'
                IMAGE_NAME=$NEW_IMAGE_NAME CONTAINER_NAME=$NEW_CONTAINER_NAME docker compose down

                echo 'checkout last success release tag'
                git checkout tags/$LAST_SUCCESS_RELEASE_TAG

                echo 'Up last success docker compose...'
                IMAGE_NAME=$LAST_SUCCESS_IMAGE_NAME CONTAINER_NAME=$LAST_SUCCESS_CONTAINER_NAME docker compose up -d
                echo 'Revert successfully.'

                exit 1
              fi

              echo 'Build successfully'

              IMAGE_ID=$(docker images --filter=reference="${NEW_IMAGE_NAME}" --format "{{.ID}}")

              sed -i "s/fe_image_id=.*/fe_image_id=$IMAGE_ID/" $CONFIG_FILE
              sed -i "s/fe_container_name=.*/fe_container_name=$NEW_CONTAINER_NAME/" $CONFIG_FILE
              sed -i "s/fe_release_tag=.*/fe_release_tag=$NEW_RELEASE_TAG/" $CONFIG_FILE

         - name: Clean images and containers not used
           shell: bash
           run: |
              echo 'erasing not used container...'
              docker container prune -f
              echo 'erased not used container.'

              echo 'erasing not used images...'
              docker image prune -af
              echo 'erased not used images.'

              exit 0
