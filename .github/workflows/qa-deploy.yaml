name: Deploy QA Hyster-yale-frontend

on:
   release:
      types:
         - created

jobs:
   build-qa-image:
      runs-on: ubuntu-latest
      if: github.event_name == 'release' && github.event.release.target_commitish == 'qa-deploy'
      steps:
         - name: Checkout
           uses: actions/checkout@v4
         - name: Set up Docker Buildx
           uses: docker/setup-buildx-action@v3
         - name: Docker meta
           id: meta
           uses: docker/metadata-action@v5
           with:
              images: ghcr.io/phoenix-software-development/hyster-yale-frontend
              flavor: latest=true
              tags: |
                 type=raw,value=qa-deploy-{{sha}}
         - name: Login to image repository
           uses: docker/login-action@v3
           with:
              registry: ghcr.io
              username: ${{ github.actor }}
              password: ${{ secrets.GHCR_TOKEN }}
         - name: Build
           id: docker_build
           uses: docker/build-push-action@v5
           with:
              context: ./
              file: docker/Dockerfile
              push: true
              tags: ${{ steps.meta.outputs.tags }}
              build-args: |
                 IMAGE_TAG=qa-deploy-${{ github.sha }}
                 RELEASE_TAG=${{ github.event.release.tag_name }}

   deploy:
      needs: [build-qa-image]
      runs-on: [self-hosted]
      permissions:
         packages: read
      steps:
         - name: Login to image repository
           uses: docker/login-action@v3
           with:
              registry: ghcr.io
              username: ${{ github.actor }}
              password: ${{ secrets.GHCR_TOKEN }}

         - name: set env
           shell: bash
           run: |
              CONFIG_FILE='/opt/hysteryale/config/docker_container.conf'

              while IFS='=' read -r key value; do
                export "$key"="$value"
              done < $CONFIG_FILE

              echo "LAST_SUCCESS_IMAGE_NAME=$fe-image_id" >> $GITHUB_ENV
              echo "LAST_SUCCESS_CONTAINER_NAME=$fe-container_name" >> $GITHUB_ENV
              echo "LAST_SUCCESS_RELEASE_TAG=$fe-release_tag" >> $GITHUB_ENV

              echo "TIMEZONE_HY=$(cat /etc/timezone)" >> $GITHUB_ENV
              echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
              echo 'WORK_DIR=/opt/hysteryale/hyster-yale-frontend' >> $GITHUB_ENV

              echo "NEW_CONTAINER_NAME=hysteryale-fe_${{ github.event.release.tag_name }}" >> $GITHUB_ENV
              echo "NEW_RELEASE_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
              echo "NEW_IMAGE_NAME=ghcr.io/phoenix-software-development/hyster-yale-frontend:latest" >> $GITHUB_ENV

         - name: Pull latest image
           shell: bash
           run: |
              # pull image
              docker pull $NEW_IMAGE_NAME

         - name: Checkout code to get file compose.yml
           shell: bash
           run: |
              cd $WORK_DIR
              git fetch
              git checkout tags/$NEW_RELEASE_TAG

         - name: Stop old container is running
           shell: bash
           run: |
              cd $WORK_DIR/docker
              IMAGE_NAME=$LAST_SUCCESS_IMAGE_NAME CONTAINER_NAME=$LAST_SUCCESS_CONTAINER_NAME docker compose stop

         - name: Run new Image
           shell: bash
           run: |
              cd $WORK_DIR/docker
              IMAGE_NAME=$NEW_IMAGE_NAME CONTAINER_NAME=$NEW_CONTAINER_NAME docker compose up -d

         - name: Check successfully
           shell: bash
           run: |
              sleep 30

              if [[ $(netstat -tuln | grep 3005) == "" ]]
              then
                echo 'Build Failure'
                docker logs $NEW_CONTAINER_NAME

                cd $WORK_DIR/docker
                echo 'Down docker compose failure'
                IMAGE_NAME=$NEW_IMAGE_NAME CONTAINER_NAME=$NEW_CONTAINER_NAME docker compose down

                echo 'checkout last success release tag'
                git checkout tags/$LAST_SUCCESS_RELEASE_TAG

                echo 'Up last success docker compose...'
                IMAGE_NAME=$LAST_SUCCESS_IMAGE_NAME CONTAINER_NAME=$LAST_SUCCESS_CONTAINER_NAME docker compose up -d
                echo 'Revert successfully.'

                exit 1
              fi

              echo 'Build successfully'

              IMAGE_ID=$(docker images --filter=reference="${NEW_IMAGE_NAME}" --format "{{.ID}}")

              sed -i "s/be-image_id=.*/fe-image_id=$IMAGE_ID/" $CONFIG_FILE
              sed -i "s/be-container_name=.*/fe-container_name=$NEW_CONTAINER_NAME/" $CONFIG_FILE
              sed -i "s/be-release_tag=.*/fe-release_tag=$NEW_RELEASE_TAG/" $CONFIG_FILE

         - name: Clean images and containers not used
           shell: bash
           run: |
              echo 'erasing not used container...'
              docker container prune -f
              echo 'erased not used container.'

              echo 'erasing not used images...'
              docker image prune -af
              echo 'erased not used images.'

              exit 0
